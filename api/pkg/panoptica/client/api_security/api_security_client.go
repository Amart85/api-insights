// Code generated by go-swagger; DO NOT EDIT.

package api_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api security API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api security API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPISecurityAPICatalogID(params *DeleteAPISecurityAPICatalogIDParams, opts ...ClientOption) (*DeleteAPISecurityAPICatalogIDNoContent, error)

	DeleteAPISecurityOpenAPISpecsCatalogID(params *DeleteAPISecurityOpenAPISpecsCatalogIDParams, opts ...ClientOption) (*DeleteAPISecurityOpenAPISpecsCatalogIDNoContent, error)

	GetAPISecurityExternalCatalog(params *GetAPISecurityExternalCatalogParams, opts ...ClientOption) (*GetAPISecurityExternalCatalogOK, error)

	GetAPISecurityExternalCatalogCatalogID(params *GetAPISecurityExternalCatalogCatalogIDParams, opts ...ClientOption) (*GetAPISecurityExternalCatalogCatalogIDOK, error)

	GetAPISecurityOpenAPISpecsCatalogID(params *GetAPISecurityOpenAPISpecsCatalogIDParams, opts ...ClientOption) (*GetAPISecurityOpenAPISpecsCatalogIDOK, error)

	GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatus(params *GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusParams, opts ...ClientOption) (*GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusOK, error)

	PostAPISecurityAPI(params *PostAPISecurityAPIParams, opts ...ClientOption) (*PostAPISecurityAPICreated, error)

	PutAPISecurityOpenAPISpecsCatalogID(params *PutAPISecurityOpenAPISpecsCatalogIDParams, opts ...ClientOption) (*PutAPISecurityOpenAPISpecsCatalogIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPISecurityAPICatalogID deletes an API
*/
func (a *Client) DeleteAPISecurityAPICatalogID(params *DeleteAPISecurityAPICatalogIDParams, opts ...ClientOption) (*DeleteAPISecurityAPICatalogIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPISecurityAPICatalogIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPISecurityAPICatalogID",
		Method:             "DELETE",
		PathPattern:        "/apiSecurity/api/{catalogId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPISecurityAPICatalogIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPISecurityAPICatalogIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPISecurityAPICatalogID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPISecurityOpenAPISpecsCatalogID deletes open api spec include all of it findings and scores
*/
func (a *Client) DeleteAPISecurityOpenAPISpecsCatalogID(params *DeleteAPISecurityOpenAPISpecsCatalogIDParams, opts ...ClientOption) (*DeleteAPISecurityOpenAPISpecsCatalogIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPISecurityOpenAPISpecsCatalogIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPISecurityOpenAPISpecsCatalogID",
		Method:             "DELETE",
		PathPattern:        "/apiSecurity/openApiSpecs/{catalogId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPISecurityOpenAPISpecsCatalogIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPISecurityOpenAPISpecsCatalogIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPISecurityOpenAPISpecsCatalogID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPISecurityExternalCatalog gets a list of a p is and their compliance
*/
func (a *Client) GetAPISecurityExternalCatalog(params *GetAPISecurityExternalCatalogParams, opts ...ClientOption) (*GetAPISecurityExternalCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPISecurityExternalCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPISecurityExternalCatalog",
		Method:             "GET",
		PathPattern:        "/apiSecurity/externalCatalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPISecurityExternalCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPISecurityExternalCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPISecurityExternalCatalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPISecurityExternalCatalogCatalogID gets information about a specific API
*/
func (a *Client) GetAPISecurityExternalCatalogCatalogID(params *GetAPISecurityExternalCatalogCatalogIDParams, opts ...ClientOption) (*GetAPISecurityExternalCatalogCatalogIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPISecurityExternalCatalogCatalogIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPISecurityExternalCatalogCatalogID",
		Method:             "GET",
		PathPattern:        "/apiSecurity/externalCatalog/{catalogId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPISecurityExternalCatalogCatalogIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPISecurityExternalCatalogCatalogIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPISecurityExternalCatalogCatalogID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPISecurityOpenAPISpecsCatalogID gets provided and reconstructed open api specs for specific API
*/
func (a *Client) GetAPISecurityOpenAPISpecsCatalogID(params *GetAPISecurityOpenAPISpecsCatalogIDParams, opts ...ClientOption) (*GetAPISecurityOpenAPISpecsCatalogIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPISecurityOpenAPISpecsCatalogIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPISecurityOpenAPISpecsCatalogID",
		Method:             "GET",
		PathPattern:        "/apiSecurity/openApiSpecs/{catalogId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPISecurityOpenAPISpecsCatalogIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPISecurityOpenAPISpecsCatalogIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPISecurityOpenAPISpecsCatalogID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatus gets open api spec score status
*/
func (a *Client) GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatus(params *GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusParams, opts ...ClientOption) (*GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatus",
		Method:             "GET",
		PathPattern:        "/apiSecurity/openApiSpecs/{catalogId}/getOpenApiSpecScoreStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPISecurityOpenAPISpecsCatalogIDGetOpenAPISpecScoreStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPISecurityAPI registers an API for scoring
*/
func (a *Client) PostAPISecurityAPI(params *PostAPISecurityAPIParams, opts ...ClientOption) (*PostAPISecurityAPICreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPISecurityAPIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPISecurityAPI",
		Method:             "POST",
		PathPattern:        "/apiSecurity/api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPISecurityAPIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPISecurityAPICreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPISecurityAPI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPISecurityOpenAPISpecsCatalogID adds or edit a spec about a specific API for the account
*/
func (a *Client) PutAPISecurityOpenAPISpecsCatalogID(params *PutAPISecurityOpenAPISpecsCatalogIDParams, opts ...ClientOption) (*PutAPISecurityOpenAPISpecsCatalogIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPISecurityOpenAPISpecsCatalogIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPISecurityOpenAPISpecsCatalogID",
		Method:             "PUT",
		PathPattern:        "/apiSecurity/openApiSpecs/{catalogId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPISecurityOpenAPISpecsCatalogIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPISecurityOpenAPISpecsCatalogIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPISecurityOpenAPISpecsCatalogID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
