// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIServiceExternal Api service external
//
// swagger:model ApiServiceExternal
type APIServiceExternal struct {
	APIServiceBase

	// Classification
	//
	// API classification label as determined by Crankshaft, e.g. ['meetings', 'messaging']
	Classification []string `json:"classification"`

	// Provider Id
	//
	// API provider id
	// Format: uuid
	ProviderID strfmt.UUID `json:"provider_id,omitempty"`

	// Provider Name
	//
	// Provider name if provider_id is set.
	ProviderName string `json:"provider_name,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *APIServiceExternal) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 APIServiceBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.APIServiceBase = aO0

	// AO1
	var dataAO1 struct {
		Classification []string `json:"classification"`

		ProviderID strfmt.UUID `json:"provider_id,omitempty"`

		ProviderName string `json:"provider_name,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Classification = dataAO1.Classification

	m.ProviderID = dataAO1.ProviderID

	m.ProviderName = dataAO1.ProviderName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m APIServiceExternal) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.APIServiceBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Classification []string `json:"classification"`

		ProviderID strfmt.UUID `json:"provider_id,omitempty"`

		ProviderName string `json:"provider_name,omitempty"`
	}

	dataAO1.Classification = m.Classification

	dataAO1.ProviderID = m.ProviderID

	dataAO1.ProviderName = m.ProviderName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Api service external
func (m *APIServiceExternal) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIServiceBase
	if err := m.APIServiceBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIServiceExternal) validateProviderID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderID) { // not required
		return nil
	}

	if err := validate.FormatOf("provider_id", "body", "uuid", m.ProviderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api service external based on the context it is used
func (m *APIServiceExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with APIServiceBase
	if err := m.APIServiceBase.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *APIServiceExternal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIServiceExternal) UnmarshalBinary(b []byte) error {
	var res APIServiceExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
