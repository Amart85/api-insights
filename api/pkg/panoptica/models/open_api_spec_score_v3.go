// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenAPISpecScoreV3 open Api spec score v3
//
// swagger:model OpenApiSpecScoreV3
type OpenAPISpecScoreV3 struct {
	generalField *OpenAPISpecScoreElementsList

	securityField *OpenAPISpecScoreElementsList

	tagsField *OpenAPISpecTags

	// components
	Components *OAPIV3Components `json:"components,omitempty"`

	// servers
	Servers *OpenAPISpecScoreElementsList `json:"servers,omitempty"`
}

// General gets the general of this subtype
func (m *OpenAPISpecScoreV3) General() *OpenAPISpecScoreElementsList {
	return m.generalField
}

// SetGeneral sets the general of this subtype
func (m *OpenAPISpecScoreV3) SetGeneral(val *OpenAPISpecScoreElementsList) {
	m.generalField = val
}

// OapIVersion gets the oap i version of this subtype
func (m *OpenAPISpecScoreV3) OapIVersion() string {
	return "OpenApiSpecScoreV3"
}

// SetOapIVersion sets the oap i version of this subtype
func (m *OpenAPISpecScoreV3) SetOapIVersion(val string) {
}

// Security gets the security of this subtype
func (m *OpenAPISpecScoreV3) Security() *OpenAPISpecScoreElementsList {
	return m.securityField
}

// SetSecurity sets the security of this subtype
func (m *OpenAPISpecScoreV3) SetSecurity(val *OpenAPISpecScoreElementsList) {
	m.securityField = val
}

// Tags gets the tags of this subtype
func (m *OpenAPISpecScoreV3) Tags() *OpenAPISpecTags {
	return m.tagsField
}

// SetTags sets the tags of this subtype
func (m *OpenAPISpecScoreV3) SetTags(val *OpenAPISpecTags) {
	m.tagsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OpenAPISpecScoreV3) UnmarshalJSON(raw []byte) error {
	var data struct {

		// components
		Components *OAPIV3Components `json:"components,omitempty"`

		// servers
		Servers *OpenAPISpecScoreElementsList `json:"servers,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		General *OpenAPISpecScoreElementsList `json:"general,omitempty"`

		OapIVersion string `json:"oapIVersion,omitempty"`

		Security *OpenAPISpecScoreElementsList `json:"security,omitempty"`

		Tags *OpenAPISpecTags `json:"tags,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result OpenAPISpecScoreV3

	result.generalField = base.General

	if base.OapIVersion != result.OapIVersion() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid oapIVersion value: %q", base.OapIVersion)
	}
	result.securityField = base.Security

	result.tagsField = base.Tags

	result.Components = data.Components
	result.Servers = data.Servers

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OpenAPISpecScoreV3) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// components
		Components *OAPIV3Components `json:"components,omitempty"`

		// servers
		Servers *OpenAPISpecScoreElementsList `json:"servers,omitempty"`
	}{

		Components: m.Components,

		Servers: m.Servers,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		General *OpenAPISpecScoreElementsList `json:"general,omitempty"`

		OapIVersion string `json:"oapIVersion,omitempty"`

		Security *OpenAPISpecScoreElementsList `json:"security,omitempty"`

		Tags *OpenAPISpecTags `json:"tags,omitempty"`
	}{

		General: m.General(),

		OapIVersion: m.OapIVersion(),

		Security: m.Security(),

		Tags: m.Tags(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this open Api spec score v3
func (m *OpenAPISpecScoreV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpecScoreV3) validateGeneral(formats strfmt.Registry) error {

	if swag.IsZero(m.General()) { // not required
		return nil
	}

	if m.General() != nil {
		if err := m.General().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) validateSecurity(formats strfmt.Registry) error {

	if swag.IsZero(m.Security()) { // not required
		return nil
	}

	if m.Security() != nil {
		if err := m.Security().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags()) { // not required
		return nil
	}

	if m.Tags() != nil {
		if err := m.Tags().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	if m.Components != nil {
		if err := m.Components.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("components")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) validateServers(formats strfmt.Registry) error {

	if swag.IsZero(m.Servers) { // not required
		return nil
	}

	if m.Servers != nil {
		if err := m.Servers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("servers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this open Api spec score v3 based on the context it is used
func (m *OpenAPISpecScoreV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpecScoreV3) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General() != nil {
		if err := m.General().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security() != nil {
		if err := m.Security().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags() != nil {
		if err := m.Tags().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	if m.Components != nil {
		if err := m.Components.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("components")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV3) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	if m.Servers != nil {
		if err := m.Servers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("servers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenAPISpecScoreV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenAPISpecScoreV3) UnmarshalBinary(b []byte) error {
	var res OpenAPISpecScoreV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
