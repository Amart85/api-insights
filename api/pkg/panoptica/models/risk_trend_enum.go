// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RiskTrendEnum RiskTrendEnum
//
// An enumeration.
//
// swagger:model RiskTrendEnum
type RiskTrendEnum string

func NewRiskTrendEnum(value RiskTrendEnum) *RiskTrendEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RiskTrendEnum.
func (m RiskTrendEnum) Pointer() *RiskTrendEnum {
	return &m
}

const (

	// RiskTrendEnumIMPROVING captures enum value "IMPROVING"
	RiskTrendEnumIMPROVING RiskTrendEnum = "IMPROVING"

	// RiskTrendEnumSTABLE captures enum value "STABLE"
	RiskTrendEnumSTABLE RiskTrendEnum = "STABLE"

	// RiskTrendEnumDEGRADING captures enum value "DEGRADING"
	RiskTrendEnumDEGRADING RiskTrendEnum = "DEGRADING"
)

// for schema
var riskTrendEnumEnum []interface{}

func init() {
	var res []RiskTrendEnum
	if err := json.Unmarshal([]byte(`["IMPROVING","STABLE","DEGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		riskTrendEnumEnum = append(riskTrendEnumEnum, v)
	}
}

func (m RiskTrendEnum) validateRiskTrendEnumEnum(path, location string, value RiskTrendEnum) error {
	if err := validate.EnumCase(path, location, value, riskTrendEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this risk trend enum
func (m RiskTrendEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRiskTrendEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this risk trend enum based on context it is used
func (m RiskTrendEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
