// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitiesSummary Vulnerabilities summary by severity
//
// swagger:model VulnerabilitiesSummary
type VulnerabilitiesSummary struct {

	// critical
	// Minimum: 0
	Critical *int64 `json:"critical,omitempty"`

	// high
	// Minimum: 0
	High *int64 `json:"high,omitempty"`

	// low
	// Minimum: 0
	Low *int64 `json:"low,omitempty"`

	// medium
	// Minimum: 0
	Medium *int64 `json:"medium,omitempty"`

	// total
	// Minimum: 0
	Total *int64 `json:"total,omitempty"`

	// unknown
	// Minimum: 0
	Unknown *int64 `json:"unknown,omitempty"`
}

// Validate validates this vulnerabilities summary
func (m *VulnerabilitiesSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCritical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnknown(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitiesSummary) validateCritical(formats strfmt.Registry) error {
	if swag.IsZero(m.Critical) { // not required
		return nil
	}

	if err := validate.MinimumInt("critical", "body", *m.Critical, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitiesSummary) validateHigh(formats strfmt.Registry) error {
	if swag.IsZero(m.High) { // not required
		return nil
	}

	if err := validate.MinimumInt("high", "body", *m.High, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitiesSummary) validateLow(formats strfmt.Registry) error {
	if swag.IsZero(m.Low) { // not required
		return nil
	}

	if err := validate.MinimumInt("low", "body", *m.Low, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitiesSummary) validateMedium(formats strfmt.Registry) error {
	if swag.IsZero(m.Medium) { // not required
		return nil
	}

	if err := validate.MinimumInt("medium", "body", *m.Medium, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitiesSummary) validateTotal(formats strfmt.Registry) error {
	if swag.IsZero(m.Total) { // not required
		return nil
	}

	if err := validate.MinimumInt("total", "body", *m.Total, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitiesSummary) validateUnknown(formats strfmt.Registry) error {
	if swag.IsZero(m.Unknown) { // not required
		return nil
	}

	if err := validate.MinimumInt("unknown", "body", *m.Unknown, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vulnerabilities summary based on context it is used
func (m *VulnerabilitiesSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitiesSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitiesSummary) UnmarshalBinary(b []byte) error {
	var res VulnerabilitiesSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
