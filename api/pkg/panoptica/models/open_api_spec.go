// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenAPISpec open Api spec
//
// swagger:model OpenApiSpec
type OpenAPISpec struct {

	// preview
	Preview *OpenAPISpecPreview `json:"preview,omitempty"`

	scoreElementsField OpenAPISpecScoreBase
}

// ScoreElements gets the score elements of this base type
func (m *OpenAPISpec) ScoreElements() OpenAPISpecScoreBase {
	return m.scoreElementsField
}

// SetScoreElements sets the score elements of this base type
func (m *OpenAPISpec) SetScoreElements(val OpenAPISpecScoreBase) {
	m.scoreElementsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OpenAPISpec) UnmarshalJSON(raw []byte) error {
	var data struct {
		Preview *OpenAPISpecPreview `json:"preview,omitempty"`

		ScoreElements json.RawMessage `json:"scoreElements,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propScoreElements OpenAPISpecScoreBase
	if string(data.ScoreElements) != "null" {
		scoreElements, err := UnmarshalOpenAPISpecScoreBase(bytes.NewBuffer(data.ScoreElements), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propScoreElements = scoreElements
	}

	var result OpenAPISpec

	// preview
	result.Preview = data.Preview

	// scoreElements
	result.scoreElementsField = propScoreElements

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OpenAPISpec) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Preview *OpenAPISpecPreview `json:"preview,omitempty"`
	}{

		Preview: m.Preview,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ScoreElements OpenAPISpecScoreBase `json:"scoreElements,omitempty"`
	}{

		ScoreElements: m.scoreElementsField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this open Api spec
func (m *OpenAPISpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreElements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpec) validatePreview(formats strfmt.Registry) error {
	if swag.IsZero(m.Preview) { // not required
		return nil
	}

	if m.Preview != nil {
		if err := m.Preview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpec) validateScoreElements(formats strfmt.Registry) error {
	if swag.IsZero(m.ScoreElements()) { // not required
		return nil
	}

	if err := m.ScoreElements().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scoreElements")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scoreElements")
		}
		return err
	}

	return nil
}

// ContextValidate validate this open Api spec based on the context it is used
func (m *OpenAPISpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScoreElements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpec) contextValidatePreview(ctx context.Context, formats strfmt.Registry) error {

	if m.Preview != nil {
		if err := m.Preview.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpec) contextValidateScoreElements(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ScoreElements().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scoreElements")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scoreElements")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenAPISpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenAPISpec) UnmarshalBinary(b []byte) error {
	var res OpenAPISpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
