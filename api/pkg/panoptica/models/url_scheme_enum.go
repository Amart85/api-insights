// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// URLSchemeEnum UrlSchemeEnum
//
// An enumeration.
//
// swagger:model UrlSchemeEnum
type URLSchemeEnum string

func NewURLSchemeEnum(value URLSchemeEnum) *URLSchemeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated URLSchemeEnum.
func (m URLSchemeEnum) Pointer() *URLSchemeEnum {
	return &m
}

const (

	// URLSchemeEnumHTTP captures enum value "HTTP"
	URLSchemeEnumHTTP URLSchemeEnum = "HTTP"

	// URLSchemeEnumHTTPS captures enum value "HTTPS"
	URLSchemeEnumHTTPS URLSchemeEnum = "HTTPS"
)

// for schema
var urlSchemeEnumEnum []interface{}

func init() {
	var res []URLSchemeEnum
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		urlSchemeEnumEnum = append(urlSchemeEnumEnum, v)
	}
}

func (m URLSchemeEnum) validateURLSchemeEnumEnum(path, location string, value URLSchemeEnum) error {
	if err := validate.EnumCase(path, location, value, urlSchemeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Url scheme enum
func (m URLSchemeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateURLSchemeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Url scheme enum based on context it is used
func (m URLSchemeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
