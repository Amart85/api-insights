// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProviderOrConditionsBase provider or conditions base
//
// swagger:discriminator ProviderOrConditionsBase attribute
type ProviderOrConditionsBase interface {
	runtime.Validatable
	runtime.ContextValidatable

	// attribute
	// Required: true
	// Enum: [ProviderRisk ProviderRiskTrend ProviderRiskTrendIsNone ProviderRiskConfidence ProviderRiskConfidenceIsNone ProviderAvgVulnerabilityDuration ProviderAvgVulnerabilityDurationIsNone ProviderName ProviderLocation ProviderLocationIsNone ProviderIndustry ProviderIndustryIsNone]
	Attribute() string
	SetAttribute(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type providerOrConditionsBase struct {
	attributeField string
}

// Attribute gets the attribute of this polymorphic type
func (m *providerOrConditionsBase) Attribute() string {
	return "ProviderOrConditionsBase"
}

// SetAttribute sets the attribute of this polymorphic type
func (m *providerOrConditionsBase) SetAttribute(val string) {
}

// UnmarshalProviderOrConditionsBaseSlice unmarshals polymorphic slices of ProviderOrConditionsBase
func UnmarshalProviderOrConditionsBaseSlice(reader io.Reader, consumer runtime.Consumer) ([]ProviderOrConditionsBase, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ProviderOrConditionsBase
	for _, element := range elements {
		obj, err := unmarshalProviderOrConditionsBase(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalProviderOrConditionsBase unmarshals polymorphic ProviderOrConditionsBase
func UnmarshalProviderOrConditionsBase(reader io.Reader, consumer runtime.Consumer) (ProviderOrConditionsBase, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalProviderOrConditionsBase(data, consumer)
}

func unmarshalProviderOrConditionsBase(data []byte, consumer runtime.Consumer) (ProviderOrConditionsBase, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the attribute property.
	var getType struct {
		Attribute string `json:"attribute"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("attribute", "body", getType.Attribute); err != nil {
		return nil, err
	}

	// The value of attribute is used to determine which type to create and unmarshal the data into
	switch getType.Attribute {
	case "ProviderOrConditionsBase":
		var result providerOrConditionsBase
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid attribute value: %q", getType.Attribute)
}

// Validate validates this provider or conditions base
func (m *providerOrConditionsBase) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this provider or conditions base based on context it is used
func (m *providerOrConditionsBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
