// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenAPISpecScoreV2 open Api spec score v2
//
// swagger:model OpenApiSpecScoreV2
type OpenAPISpecScoreV2 struct {
	generalField *OpenAPISpecScoreElementsList

	securityField *OpenAPISpecScoreElementsList

	tagsField *OpenAPISpecTags

	// definitions
	Definitions *OpenAPISpecScoreElementsList `json:"definitions,omitempty"`

	// parameters
	Parameters *OpenAPISpecScoreElementsList `json:"parameters,omitempty"`

	// responses
	Responses *OpenAPISpecScoreElementsList `json:"responses,omitempty"`

	// security definitions
	SecurityDefinitions *OpenAPISpecScoreElementsList `json:"securityDefinitions,omitempty"`
}

// General gets the general of this subtype
func (m *OpenAPISpecScoreV2) General() *OpenAPISpecScoreElementsList {
	return m.generalField
}

// SetGeneral sets the general of this subtype
func (m *OpenAPISpecScoreV2) SetGeneral(val *OpenAPISpecScoreElementsList) {
	m.generalField = val
}

// OapIVersion gets the oap i version of this subtype
func (m *OpenAPISpecScoreV2) OapIVersion() string {
	return "OpenApiSpecScoreV2"
}

// SetOapIVersion sets the oap i version of this subtype
func (m *OpenAPISpecScoreV2) SetOapIVersion(val string) {
}

// Security gets the security of this subtype
func (m *OpenAPISpecScoreV2) Security() *OpenAPISpecScoreElementsList {
	return m.securityField
}

// SetSecurity sets the security of this subtype
func (m *OpenAPISpecScoreV2) SetSecurity(val *OpenAPISpecScoreElementsList) {
	m.securityField = val
}

// Tags gets the tags of this subtype
func (m *OpenAPISpecScoreV2) Tags() *OpenAPISpecTags {
	return m.tagsField
}

// SetTags sets the tags of this subtype
func (m *OpenAPISpecScoreV2) SetTags(val *OpenAPISpecTags) {
	m.tagsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OpenAPISpecScoreV2) UnmarshalJSON(raw []byte) error {
	var data struct {

		// definitions
		Definitions *OpenAPISpecScoreElementsList `json:"definitions,omitempty"`

		// parameters
		Parameters *OpenAPISpecScoreElementsList `json:"parameters,omitempty"`

		// responses
		Responses *OpenAPISpecScoreElementsList `json:"responses,omitempty"`

		// security definitions
		SecurityDefinitions *OpenAPISpecScoreElementsList `json:"securityDefinitions,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		General *OpenAPISpecScoreElementsList `json:"general,omitempty"`

		OapIVersion string `json:"oapIVersion,omitempty"`

		Security *OpenAPISpecScoreElementsList `json:"security,omitempty"`

		Tags *OpenAPISpecTags `json:"tags,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result OpenAPISpecScoreV2

	result.generalField = base.General

	if base.OapIVersion != result.OapIVersion() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid oapIVersion value: %q", base.OapIVersion)
	}
	result.securityField = base.Security

	result.tagsField = base.Tags

	result.Definitions = data.Definitions
	result.Parameters = data.Parameters
	result.Responses = data.Responses
	result.SecurityDefinitions = data.SecurityDefinitions

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OpenAPISpecScoreV2) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// definitions
		Definitions *OpenAPISpecScoreElementsList `json:"definitions,omitempty"`

		// parameters
		Parameters *OpenAPISpecScoreElementsList `json:"parameters,omitempty"`

		// responses
		Responses *OpenAPISpecScoreElementsList `json:"responses,omitempty"`

		// security definitions
		SecurityDefinitions *OpenAPISpecScoreElementsList `json:"securityDefinitions,omitempty"`
	}{

		Definitions: m.Definitions,

		Parameters: m.Parameters,

		Responses: m.Responses,

		SecurityDefinitions: m.SecurityDefinitions,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		General *OpenAPISpecScoreElementsList `json:"general,omitempty"`

		OapIVersion string `json:"oapIVersion,omitempty"`

		Security *OpenAPISpecScoreElementsList `json:"security,omitempty"`

		Tags *OpenAPISpecTags `json:"tags,omitempty"`
	}{

		General: m.General(),

		OapIVersion: m.OapIVersion(),

		Security: m.Security(),

		Tags: m.Tags(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this open Api spec score v2
func (m *OpenAPISpecScoreV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpecScoreV2) validateGeneral(formats strfmt.Registry) error {

	if swag.IsZero(m.General()) { // not required
		return nil
	}

	if m.General() != nil {
		if err := m.General().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) validateSecurity(formats strfmt.Registry) error {

	if swag.IsZero(m.Security()) { // not required
		return nil
	}

	if m.Security() != nil {
		if err := m.Security().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags()) { // not required
		return nil
	}

	if m.Tags() != nil {
		if err := m.Tags().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) validateDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.Definitions) { // not required
		return nil
	}

	if m.Definitions != nil {
		if err := m.Definitions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definitions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("definitions")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) validateResponses(formats strfmt.Registry) error {

	if swag.IsZero(m.Responses) { // not required
		return nil
	}

	if m.Responses != nil {
		if err := m.Responses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) validateSecurityDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityDefinitions) { // not required
		return nil
	}

	if m.SecurityDefinitions != nil {
		if err := m.SecurityDefinitions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityDefinitions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityDefinitions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this open Api spec score v2 based on the context it is used
func (m *OpenAPISpecScoreV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefinitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityDefinitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General() != nil {
		if err := m.General().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security() != nil {
		if err := m.Security().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags() != nil {
		if err := m.Tags().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateDefinitions(ctx context.Context, formats strfmt.Registry) error {

	if m.Definitions != nil {
		if err := m.Definitions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definitions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("definitions")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {
		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	if m.Responses != nil {
		if err := m.Responses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecScoreV2) contextValidateSecurityDefinitions(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityDefinitions != nil {
		if err := m.SecurityDefinitions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityDefinitions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityDefinitions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenAPISpecScoreV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenAPISpecScoreV2) UnmarshalBinary(b []byte) error {
	var res OpenAPISpecScoreV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
