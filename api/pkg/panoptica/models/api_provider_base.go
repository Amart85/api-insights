// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIProviderBase ApiProvider_Base
//
// swagger:model ApiProvider_Base
type APIProviderBase struct {

	// id
	//
	// Unique id of the subject API as assigned by Crankshaft
	// Required: true
	// Format: uuid
	Identifier *strfmt.UUID `json:"identifier"`

	// Industry
	Industry string `json:"industry,omitempty"`

	// Location
	Location string `json:"location,omitempty"`

	// Name
	//
	// Name of the provider, typically an FQDN
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this Api provider base
func (m *APIProviderBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIProviderBase) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	if err := validate.FormatOf("identifier", "body", "uuid", m.Identifier.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIProviderBase) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Api provider base based on context it is used
func (m *APIProviderBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIProviderBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIProviderBase) UnmarshalBinary(b []byte) error {
	var res APIProviderBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
