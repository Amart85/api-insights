// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIServiceProfileCompliance ApiServiceProfileCompliance
//
// swagger:model ApiServiceProfileCompliance
type APIServiceProfileCompliance struct {

	// Api Id
	//
	// Api Service this compliance refers to
	// Required: true
	// Format: uuid
	APIID *strfmt.UUID `json:"api_id"`

	// Compliant
	//
	// True if score is compliant with the profile. False otherwise.
	// Required: true
	Compliant *bool `json:"compliant"`

	// profile
	// Required: true
	Profile *APIPolicyProfile `json:"profile"`

	// Score Id
	//
	// If existing, score used to compute the compliance
	// Format: uuid
	ScoreID strfmt.UUID `json:"score_id,omitempty"`

	// violation
	Violation *ProfileViolation `json:"violation,omitempty"`
}

// Validate validates this Api service profile compliance
func (m *APIServiceProfileCompliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompliant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViolation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIServiceProfileCompliance) validateAPIID(formats strfmt.Registry) error {

	if err := validate.Required("api_id", "body", m.APIID); err != nil {
		return err
	}

	if err := validate.FormatOf("api_id", "body", "uuid", m.APIID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIServiceProfileCompliance) validateCompliant(formats strfmt.Registry) error {

	if err := validate.Required("compliant", "body", m.Compliant); err != nil {
		return err
	}

	return nil
}

func (m *APIServiceProfileCompliance) validateProfile(formats strfmt.Registry) error {

	if err := validate.Required("profile", "body", m.Profile); err != nil {
		return err
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *APIServiceProfileCompliance) validateScoreID(formats strfmt.Registry) error {
	if swag.IsZero(m.ScoreID) { // not required
		return nil
	}

	if err := validate.FormatOf("score_id", "body", "uuid", m.ScoreID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIServiceProfileCompliance) validateViolation(formats strfmt.Registry) error {
	if swag.IsZero(m.Violation) { // not required
		return nil
	}

	if m.Violation != nil {
		if err := m.Violation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("violation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("violation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Api service profile compliance based on the context it is used
func (m *APIServiceProfileCompliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViolation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIServiceProfileCompliance) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.Profile != nil {
		if err := m.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *APIServiceProfileCompliance) contextValidateViolation(ctx context.Context, formats strfmt.Registry) error {

	if m.Violation != nil {
		if err := m.Violation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("violation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("violation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIServiceProfileCompliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIServiceProfileCompliance) UnmarshalBinary(b []byte) error {
	var res APIServiceProfileCompliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
