// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RiskConfidenceEnum RiskConfidenceEnum
//
// An enumeration.
//
// swagger:model RiskConfidenceEnum
type RiskConfidenceEnum string

func NewRiskConfidenceEnum(value RiskConfidenceEnum) *RiskConfidenceEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RiskConfidenceEnum.
func (m RiskConfidenceEnum) Pointer() *RiskConfidenceEnum {
	return &m
}

const (

	// RiskConfidenceEnumHIGH captures enum value "HIGH"
	RiskConfidenceEnumHIGH RiskConfidenceEnum = "HIGH"

	// RiskConfidenceEnumMEDIUM captures enum value "MEDIUM"
	RiskConfidenceEnumMEDIUM RiskConfidenceEnum = "MEDIUM"

	// RiskConfidenceEnumLOW captures enum value "LOW"
	RiskConfidenceEnumLOW RiskConfidenceEnum = "LOW"
)

// for schema
var riskConfidenceEnumEnum []interface{}

func init() {
	var res []RiskConfidenceEnum
	if err := json.Unmarshal([]byte(`["HIGH","MEDIUM","LOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		riskConfidenceEnumEnum = append(riskConfidenceEnumEnum, v)
	}
}

func (m RiskConfidenceEnum) validateRiskConfidenceEnumEnum(path, location string, value RiskConfidenceEnum) error {
	if err := validate.EnumCase(path, location, value, riskConfidenceEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this risk confidence enum
func (m RiskConfidenceEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRiskConfidenceEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this risk confidence enum based on context it is used
func (m RiskConfidenceEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
