// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenAPISpecScoreBase open Api spec score base
//
// swagger:discriminator OpenApiSpecScoreBase oapIVersion
type OpenAPISpecScoreBase interface {
	runtime.Validatable
	runtime.ContextValidatable

	// general
	General() *OpenAPISpecScoreElementsList
	SetGeneral(*OpenAPISpecScoreElementsList)

	// oap i version
	// Enum: [OpenApiSpecScoreV2 OpenApiSpecScoreV3]
	OapIVersion() string
	SetOapIVersion(string)

	// security
	Security() *OpenAPISpecScoreElementsList
	SetSecurity(*OpenAPISpecScoreElementsList)

	// tags
	Tags() *OpenAPISpecTags
	SetTags(*OpenAPISpecTags)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type openApiSpecScoreBase struct {
	generalField *OpenAPISpecScoreElementsList

	oapIVersionField string

	securityField *OpenAPISpecScoreElementsList

	tagsField *OpenAPISpecTags
}

// General gets the general of this polymorphic type
func (m *openApiSpecScoreBase) General() *OpenAPISpecScoreElementsList {
	return m.generalField
}

// SetGeneral sets the general of this polymorphic type
func (m *openApiSpecScoreBase) SetGeneral(val *OpenAPISpecScoreElementsList) {
	m.generalField = val
}

// OapIVersion gets the oap i version of this polymorphic type
func (m *openApiSpecScoreBase) OapIVersion() string {
	return "OpenApiSpecScoreBase"
}

// SetOapIVersion sets the oap i version of this polymorphic type
func (m *openApiSpecScoreBase) SetOapIVersion(val string) {
}

// Security gets the security of this polymorphic type
func (m *openApiSpecScoreBase) Security() *OpenAPISpecScoreElementsList {
	return m.securityField
}

// SetSecurity sets the security of this polymorphic type
func (m *openApiSpecScoreBase) SetSecurity(val *OpenAPISpecScoreElementsList) {
	m.securityField = val
}

// Tags gets the tags of this polymorphic type
func (m *openApiSpecScoreBase) Tags() *OpenAPISpecTags {
	return m.tagsField
}

// SetTags sets the tags of this polymorphic type
func (m *openApiSpecScoreBase) SetTags(val *OpenAPISpecTags) {
	m.tagsField = val
}

// UnmarshalOpenAPISpecScoreBaseSlice unmarshals polymorphic slices of OpenAPISpecScoreBase
func UnmarshalOpenAPISpecScoreBaseSlice(reader io.Reader, consumer runtime.Consumer) ([]OpenAPISpecScoreBase, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []OpenAPISpecScoreBase
	for _, element := range elements {
		obj, err := unmarshalOpenAPISpecScoreBase(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalOpenAPISpecScoreBase unmarshals polymorphic OpenAPISpecScoreBase
func UnmarshalOpenAPISpecScoreBase(reader io.Reader, consumer runtime.Consumer) (OpenAPISpecScoreBase, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalOpenAPISpecScoreBase(data, consumer)
}

func unmarshalOpenAPISpecScoreBase(data []byte, consumer runtime.Consumer) (OpenAPISpecScoreBase, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the oapIVersion property.
	var getType struct {
		OapIVersion string `json:"oapIVersion"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("oapIVersion", "body", getType.OapIVersion); err != nil {
		return nil, err
	}

	// The value of oapIVersion is used to determine which type to create and unmarshal the data into
	switch getType.OapIVersion {
	case "OpenApiSpecScoreBase":
		var result openApiSpecScoreBase
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "OpenApiSpecScoreV2":
		var result OpenAPISpecScoreV2
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "OpenApiSpecScoreV3":
		var result OpenAPISpecScoreV3
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid oapIVersion value: %q", getType.OapIVersion)
}

// Validate validates this open Api spec score base
func (m *openApiSpecScoreBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *openApiSpecScoreBase) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General()) { // not required
		return nil
	}

	if m.General() != nil {
		if err := m.General().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

var openApiSpecScoreBaseTypeOapIVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OpenApiSpecScoreV2","OpenApiSpecScoreV3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openApiSpecScoreBaseTypeOapIVersionPropEnum = append(openApiSpecScoreBaseTypeOapIVersionPropEnum, v)
	}
}

const (

	// OpenAPISpecScoreBaseOapIVersionOpenAPISpecScoreV2 captures enum value "OpenApiSpecScoreV2"
	OpenAPISpecScoreBaseOapIVersionOpenAPISpecScoreV2 string = "OpenApiSpecScoreV2"

	// OpenAPISpecScoreBaseOapIVersionOpenAPISpecScoreV3 captures enum value "OpenApiSpecScoreV3"
	OpenAPISpecScoreBaseOapIVersionOpenAPISpecScoreV3 string = "OpenApiSpecScoreV3"
)

// prop value enum
func (m *openApiSpecScoreBase) validateOapIVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openApiSpecScoreBaseTypeOapIVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *openApiSpecScoreBase) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.Security()) { // not required
		return nil
	}

	if m.Security() != nil {
		if err := m.Security().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *openApiSpecScoreBase) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags()) { // not required
		return nil
	}

	if m.Tags() != nil {
		if err := m.Tags().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this open Api spec score base based on the context it is used
func (m *openApiSpecScoreBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *openApiSpecScoreBase) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General() != nil {
		if err := m.General().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *openApiSpecScoreBase) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security() != nil {
		if err := m.Security().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *openApiSpecScoreBase) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags() != nil {
		if err := m.Tags().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}
