// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IPProtoEnum IpProtoEnum
//
// An enumeration.
//
// swagger:model IpProtoEnum
type IPProtoEnum string

func NewIPProtoEnum(value IPProtoEnum) *IPProtoEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IPProtoEnum.
func (m IPProtoEnum) Pointer() *IPProtoEnum {
	return &m
}

const (

	// IPProtoEnumTCP captures enum value "TCP"
	IPProtoEnumTCP IPProtoEnum = "TCP"

	// IPProtoEnumUDP captures enum value "UDP"
	IPProtoEnumUDP IPProtoEnum = "UDP"
)

// for schema
var ipProtoEnumEnum []interface{}

func init() {
	var res []IPProtoEnum
	if err := json.Unmarshal([]byte(`["TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipProtoEnumEnum = append(ipProtoEnumEnum, v)
	}
}

func (m IPProtoEnum) validateIPProtoEnumEnum(path, location string, value IPProtoEnum) error {
	if err := validate.EnumCase(path, location, value, ipProtoEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Ip proto enum
func (m IPProtoEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIPProtoEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Ip proto enum based on context it is used
func (m IPProtoEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
